
    <% if (R.plugin('rux_start')){ %>
         <%- R.plugin('rux_start') %>
    <% }else{ %>

    <link href="/public/bootstrap/js/google-code-prettify/prettify.css" rel="stylesheet">
    <script src="/public/bootstrap/js/google-code-prettify/prettify.js"></script>

    <div class="inner" style="" >
        
            <div class="col-md-12">
                <h2 class="text-center"><img src="/public/rmodules/Util/UxjsNode/img/logo-disable.png" height="200" ></h2>
                <h2 class="text-center">Bienvenidos al entorno Uxjs</h2>
                
                <p class="text-center">El entorno Uxjs sirve como plantilla predefinida para lograr una lógica de integración entre las funciones que usted desarrolla. </p>
                <p class="text-center">Reemplace esta guía de inicio por la pantalla inicial que usted desee </p>
                <br>
                <h4 class="text-left">Contenido</h4>
                <hr>
                <ul>
                    <li>
                        <a href="#viewplugin">ViewPlugins definidos</a>
                    </li>
                    <li>
                        <a href="#funcionanlidades">Desarrollando funcionalidades</a>
                    </li>
                    <li>
                        <a href="#menusidebar">Menú lateral de funcionalidades</a>
                    </li>
                    <li>
                        <a href="#estilo">Personalizando el ambiente</a>
                    </li>
                </ul>
                <br>
                <br>
                <h4 id="viewplugin" class="text-left">ViewPlugins definidos</h4>
                <hr>
                <p>Los ViewPlugins es una de las nuevas funciones en Raptor 2, permite la inyección de contenido en los hotpots declarados en el sistema para determinados patrones de ruta. </p>
                
                <p>El entorno RUX tiene 3 puntos principales de inyección de contenido, donde podrán definirse bloques personalizados con el contenido que deseamos logrando personalizar nuestro entorno para el objetivo deseado. </p>
                <h2 class="text-left"><img src="/public/rmodules/Util/UxjsNode/img/hotpot.gif" ></h2>
                <b>Punto 1</b>
                <p>Inserta contenido dentro del menu de opciones.</p>
                <p>Nombre hotpot: <code>rux_sidebar</code></p>
                
                <b>Punto 2</b>
                <p>Inserta contenido dentro del panel superior, la inserción es realizada en el menu agrupado a la derecha.</p>
                <p>Nombre hotpot: <code>rux_navbar</code></p>
                <b>Punto 3</b>
                <p>Inserta contenido dentro del cuerpo, la inserción es realizada fuera del area de la funcionalidad por lo que será visible en todas las funcionalidades cargadas en el area.</p>
                <p>Nombre hotpot: <code>rux_content</code></p>
                
                <b>Punto 4 (cabecera)</b>
                <p>Inserta contenido dentro del head de la página, ideal para insertar estilos y javascript personalizados que queremos ejecutar antes de la carga de la página.</p>
                <p>Nombre hotpot: <code>rux_header</code></p>
                
                <b>Punto 5 (script)</b>
                <p>Inserta contenido dentro de la sección de declaración javascript al final de la página, ideal para insertar otras bibliotecas javacript que deseemos o simplemente un script adicional.</p>
                <p>Nombre hotpot: <code>rux_script</code></p>
                
                <b>Punto 6 (Pantalla de inicio)</b>
                <p>Inserta contenido dentro del area de la página de inicio, este hotpot reemplaza la guía inicial de RUX por la página de inicio de su opción.</p>
                <p>Nombre hotpot: <code>rux_start</code></p>
                
                <b>Punto 7 (Icono de página)</b>
                <p>Reemplaza el icono por defecto del entorno RUX, ustded deberá especificar solamente la url del icono.</p>
                <p>Nombre hotpot: <code>rux_icon</code></p>
                
                <b>Punto 8 (Nombre de página)</b>
                <p>Reemplaza el nombre por defecto del entorno RUX que aparece al lado del icono.</p>
                <p>Nombre hotpot: <code>rux_name</code></p>
                
                <b><i>Los Hotpots siguientes pertenecientes la zona de perfil de usuario deberán inyectarse con la función \Util\RUXBundle\RUXBundle::addProfileViewPlugin</i></b>
                <br><br>
                <b>Punto 9 (Zona de script perfil de usuario)</b>
                <p>Inserta contenido dentro de la sección de declaración javascript en la página del perfil de usuario.</p>
                <p>Nombre hotpot: <code>rux_profile_script</code></p>
                
                <b>Punto 10 (Definición de nuevos tabs)</b>
                <p>Inserta la declaración de los nuevos tabs en la página de perfil de usuario. La declaración debe comenzar a partir de las etiquetas <b>li</b> y debe usarse en conjunto con la definción del contenido del tab.</p>
                <p>Nombre hotpot: <code>rux_profile_tab</code></p>
                
                <b>Punto 11 (Definición del contenido del tab)</b>
                <p>Inserta el contenido de los tabs previamente declarados. No deberá olvidar especificar <code>role="tabpanel" class="tab-pane"</code> dentro de la definición de la etiqueta.</p>
                <p>Nombre hotpot: <code>rux_profile_tabcontent</code></p>
                
                <b>Punto 12</b>
                <p>Establece la ruta base de los iconos del menu.</p>
                <p>Nombre hotpot: <code>rux_sidebar_iconbase</code></p>
                
                <b>Inyectando contenido</b>
                <p>Debe tener en cuenta que para inyectar contenido la instrucción deberá ejecutarse antes del renderizado del portal, para esto puede llamar esta función en el método <b>registerRouteRule</b> o <b>configure</b> de cada bundle.</p>
                <p>
                <pre class="prettyprint linenums">
class exampleBundle extends Bundle{
    
    public function registerRouteRule(RuleContainer $ruleContainer) {
    //Inyecta contenido dentro del cuerpo del area de renderizado de funcionalidades
    &nbsp;\Util\RUXBundle\RUXBundle::addViewPlugin('rux_content', $this->app->render('@exampleBundle/index.html.twig'));
    //Declara un nuevo tab en el perfil de usuario
    &nbsp;\Util\RUXBundle\RUXBundle::addProfileViewPlugin('rux_profile_tab', $this->app->render('@exampleBundle/tab.html.twig'));
    &nbsp;\Util\RUXBundle\RUXBundle::addProfileViewPlugin('rux_profile_tabcontent', $this->app->render('@exampleBundle/tabcontent.html.twig'));
    }

}
                 </pre>
                
                <br>
                <h4 id="funcionanlidades" class="text-left">Desarrollando funcionalidades</h4>
                <hr>
                <p>Las funcionalidades que usted desarrolla aparecerán en el area de contenido, pueden ser visualizadas de 2 formas, <b>embebidas</b> o <b>enmarcadas</b>.</p>
                <b>Funcionalidades embebidas</b>
                <p>Este modo de renderizado significa que el contenido será inyectado dentro del área de contenido y estará en el mismo ámbito de variable que el portal RUX, se recomienda que para cada funcionalidad de este tipo se cree un ámbito propio de modo que no propicie el choque entre variables ni las fugas de memoria.</p>
                
                <b>Funcionalidades enmarcadas</b>
                <p>Este modo de renderizado significa que el contenido será enmarcado en un iframe dentro del área de contenido, es utilizado sobre todo en tecnologías como Extjs y funciones que por alguna razón tienen poca combatibilidad con el ambiente.</p>
                
                <b>Seteando el modo</b>
                <p>Por defecto las funcionalidades serán renderizadas en modo enmarcado excepto que se especifique explicitamente lo contrario. Para especificar el modo embebido, la funcionalidad registrada en el módulo de seguridad deberá contener la clase <b>ui-bootstrap</b>. Adicionalmente se podrá abrir una funcionalidad explicitamente a través de javascript llamando la función <b>RUX.openUI()</b></p>
                <pre class="prettyprint linenums">
//el primer parametro de esta funcion establece el modo de renderizado
// true = enmarcado, false = embebido
RUX.openUI(true,'/ruta/deseada')

                </pre>
               
                <br>
                <h4 id="menusidebar" class="text-left">Menú lateral de funcionalidades</h4>
                <hr>
                <p>El menú lateral contiene todas las funcionalidades registradas en el módulo de seguridad a las cuales el usuario autenticado tiene permisos.</p>
                <p>La lista lateral esta diseñada solo para 2 niveles, por lo que si existen permisos diseñados por encima del nivel 2, entonces serán mesclados como permisos del nivel 2 excluyendo los contenedores.</p>
                <b>Iconos del menú</b>
                <p>Los iconos de los item del menú serán establecidos a través de la clase del privilegio en módulo de seguridad, en la forma <code>menu-user</code> donde <code>menu-</code> será el prefijo que indica que se le seteará un ícono y <code>user</code> es el nombre del archivo png que se utilizará como ícono del menú, esta imagen deberá estar localizada en <b>Resources/menu</b> dentro del bundle RUX.</p>
                
                <br>
                <h4 id="estilo" class="text-left">Personalizando el ambiente</h4>
                <hr>
                <p>El ambiente es personalizado a través de hojas de estilo, debemos de utilizar el hotpot destinado para inyectar contenido dentro de la cabecera del entorno y comenzar a redefinir el estilo del mismo. El estilo aplicado en el portal, tendrá efecto en todas las funcionalidades renderizadas en modo embebido si se desea, ya que en este modo las funcionalidades son inyectadas directamente en el area de contenido y pertenecen al scope del entorno.</p>
                <p>Para esto solo es necesario un par de conocomientos sobre CSS y la redefinición de las principales clases de Bootstrap que utiliza RUX.</p>
             
                <pre class="prettyprint linenums">
//Creamos nuestro archivo ( custom-rux.css ) con la personalización del entorno
//este archivo lo definimos en Resources en el bundle que queramos

//Redefinimos la barra de cabecera de la siguiente forma(algo simple)
.rux-header{
    background: #999999
}

//tab activo del perfil de usuario
.rux-profile .nav-tabs > li.active > a, 
.rux-profile .nav-tabs > li.active > a:focus, 
.rux-profile .nav-tabs > li.active > a:hover {
    background-color: #660066;
    color: white;
}

//Barra de progreso superior, indicador de carga de funcionalidades
.pace .pace-progress{
    background-color: #660066;
}
                 </pre>
                <pre class="prettyprint linenums">
//Definimos el marcado del css a inyectar ( customrux.html.twig )
//Aqui podemos agregar todo lo que desees inyectar en la cabecera

&lt;link href="&lbrace;&lbrace; asset('examples/example/custom-rux.css') &rbrace;&rbrace;" rel="stylesheet"&gt;

                 </pre>
                <pre class="prettyprint linenums">
//Y en nuestra clase principal mandamos a inyectar esta definicion en el entorno           
class exampleBundle extends Bundle{
    
    public function registerRouteRule(RuleContainer $ruleContainer) {
    
    &nbsp;\Util\RUXBundle\RUXBundle::addViewPlugin('rux_header', $this->app->render('@exampleBundle/customrux.html.twig'));
    
    }

}
                </pre>
                <br>
                <b>Personalizar página de autenticación</b>
                <p>El entorno se encuentra equipado para brindarte la facilidad de establcer una plantilla personalizada de login, el único requisito es que los nombres de los parametros enviados en el formulario de login debe ser <code>username</code> y <code>password</code>.</p>
                <pre class="prettyprint linenums">
//Para personalizar el login debemos definir primero en el método
//configure de nuestro bundle, la ruta de la plantilla que se utilizará
//Luego utilizamos la función protectRoute para establecer la ruta que
//queremos proteger y a la cual le será aplicada la plantilla que definimos           
class exampleBundle extends Bundle{
    
    public function registerRouteRule(RuleContainer $ruleContainer) {
    
    &nbsp;\Util\RUXBundle\RUXBundle::protectRoute('/miruta');
    
    }

    public function configure() {
    
    &nbsp;\Util\RUXBundle\RUXBundle::configureTemplate('@exampleBundle/custom-login.html.twig');
    
    }

}
                </pre>
            </div>
         
        </div>
    <script type="text/javascript">
        window.prettyPrint && prettyPrint()
        
    </script>
<% } %> 



