'use strict';
var passport = require('passport')
  , LocalStrategy = require('passport-local').Strategy

/**
* 
* @author William Amed
*/
class SecurityManager{

	constructor(R){
		this.R=R
	}

	setLogin(route,template,criteria){
		var self=this;

		// passport.serializeUser(function(user, done){
		// 	done(null, {
		// 		username: user
		// 	});
		// });
		
		this.R.app.all(route,function(req,res,next){

			// For Authentication Purposes
			//passport.use(new SessionStrategy());

			passport.use(new LocalStrategy(
				function(){
					return self._authentication.apply(self,arguments)
				}
			));


			var passportAuth=passport.authenticate('local', {  failureRedirect: route,successRedirect: route });

			if(typeof criteria=='function'){
				if(criteria(req,res,next)){
					if(req.is('application/x-www-form-urlencoded')){
						passportAuth(req,res,next)
					}else
						res.render(template);
				}else{
					next();
				}
					
			}else{
				if(!req.isAuthenticated()){
					if(req.is('application/x-www-form-urlencoded')){
						passportAuth(req,res,next)
					}else
						res.render(template);
				}else{
					next();
				}
			}

		})

		this.R.app.all(route,function(){
			return self._authorization.apply(self,arguments)
		})
		this.R.app.all(route,function(){
			return self._auditories.apply(self,arguments)
		})

		return this;
	}

	setAuthentication(auth){
		this._authentication=auth
		return this;
	}

	setAuthorization(auth){
		this._authorization=auth
		return this;
	}

	setAuditory(aud){
		this._auditories=aud
		return this;
	}


	_authentication(username, password, done){
		return done(null, {
				username: username
			});
	}

	_authorization(req,res,next){
		next()
	}

	_auditories(req,res,next){
		next()
	}
}


module.exports=SecurityManager