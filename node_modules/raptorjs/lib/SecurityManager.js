'use strict';
var passport = require('passport')
  , LocalStrategy = require('passport-local').Strategy

/**
* 
* @author William Amed
*/
class SecurityManager{

	constructor(R){
		this.R=R
		var self=this;
		if(!this.init){
			
			this.init=true
		}
	}

	setLogin(route,template,criteria){
	    if(this.R.options.database.state==='off'){
	        return this;
	    }
	    
		var self=this;
		var name='raptor'+Math.random()
		// passport.serializeUser(function(user, done){
		// 	done(null, {
		// 		username: user
		// 	});
		// });
		passport.use(name,new LocalStrategy({
				passReqToCallback:true
		},
			function(){
				
				return self._authentication.apply(self,arguments)
			}
		));

		this.R.app.all(route,function(req,res,next){

			// For Authentication Purposes
			//passport.use(new SessionStrategy());

			


			var passportAuth=passport.authenticate(name, function(err,user){
			    if(err) next(err);
			    req.logIn(user,function(){
			        req.session.save(function(){
			            res.redirect(req.url)
			        })
			    })
			});

			if(self._criteria && typeof self._criteria=='function'){
				if(self._criteria(req,res,next)){
					if(req.is('application/x-www-form-urlencoded')&&req.body.username&&req.body.password){
						passportAuth(req,res,next)
					}else{
						res.status(401)
						res.render(template);
					}	
				}else{
					next();
				}
					
			}else{

				if(!req.isAuthenticated()){
					
					if(req.is('application/x-www-form-urlencoded')&&req.body.username&&req.body.password){
						passportAuth(req,res,next)
					}else{
						res.status(401)
						res.render(template);
					}	
				}else{
					next();
				}
			}

		})

		this.R.app.all(route,function(){
			return self._authorization.apply(self,arguments)
		})
		this.R.app.all(route,function(){
			return self._auditories.apply(self,arguments)
		})

		return this;
	}

	setAuthentication(auth){
		this._authentication=auth
		return this;
	}

	setAuthorization(auth){
		this._authorization=auth
		return this;
	}

	setAuditories(aud){
		this._auditories=aud
		return this;
	}

	setCondition(cond){
		this._criteria=cond
		return this;
	}


	_authentication(username, password, done){
		return done(null, {
				username: username
			});
	}

	_authorization(req,res,next){
		next()
	}

	_auditories(req,res,next){
		next()
	}
	
	setLogout(cond){
		this.logout=cond
		return this;
	}
	
}


module.exports=SecurityManager