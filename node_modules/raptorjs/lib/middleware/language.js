var i18n = require('i18n-nodejs')
, lodash = require('lodash')
, fs = require('fs')
, path = require('path');

module.exports={
	config:{
		default:'es',
		currentLanguage: 'es',
		i18nLocation: '/i18n/language.json',
	},


	/*
	* Raptor.js - Node framework
	*
	* Solo para uso interno.
	* Devuelve un lenguaje a partir de lo especificado en la configuración.
	*
	* @author Jorge Miralles
	*/
	selectLanguage:function(){
		var lang = this.config.default;
		// Si la opción "usePrefered" esta activa (true) se guardan los lenguajes de la petición
		if (this.config.usePrefered == true) {
			this.config.acceptedLanguage=this.request.acceptedLanguages[0];
			lang = this.config.acceptedLanguage;
		}
		//Si la opción "cookieName" existe y no es vacía se cambia el lenguaje de la configuración por el lenguaje de la cookie
		if (this.config.cookieName && this.config.cookieName !=="") {
			this.config.cookieLanguage = this.request.cookies[this.config.cookieName];
			lang = this.config.cookieLanguage;
		}
		this.config.currentLanguage = lang;
		return lang;
	},

	/*
	* Raptor.js - Node framework
	*
	* Inicaliza el traductor a partir de la configuración
	*
	* @author Jorge Miralles
	* @param string basPath Ruta base del Raptor
	* @param {object} bundle Componente que utiliza el traductor
	* @param {object} req La peticion para la que se configura el traductor
	*/
	init:function(bundles,bundle, req, basePath){
		this.bundles = bundles;
		this.request = req;
		this.basePath = basePath;		
		var file = path.join(this.basePath,'src',bundle.path,this.config.i18nLocation);
		if (fs.existsSync(file)){
			this.config.file = file;
			var lang = this.selectLanguage();
			this.translator = i18n(lang,file);
		}
	},

	/*
	* Raptor.js - Node framework
	*
	* Devuelve el lenguaje actual de las traducciones
	*
	* @author Jorge Miralles
	*/
	getCurrentLanguage:function(){
		return this.config.currentLanguage;
	},

	/*
	* Raptor.js - Node framework
	*
	* Devuelve el lenguaje actual de las traducciones
	*
	* @author Jorge Miralles
	* @param {string} lang Nuevo lenguaje
	*/
	setCurrentLanguage:function(lang){
		this.config.currentLanguage = lang;
		this.translator = i18n(this.config.currentLanguage,this.config.file);
	},

	/*
	* Raptor.js - Node framework
	*
	* Activa o desactiva el uso del lenguaje del navegador
	*
	* @author Jorge Miralles
	* @param {string} usePrefered nuevo lenguaje
	*/
	setUsePreferedLanguage:function(usePrefered){
		this.config.usePrefered = usePrefered;
		var lang = this.selectLanguage();	
		this.translator = i18n(lang,this.config.file);
	},

	/*
	* Raptor.js - Node framework
	*
	* Cambia la configuración. El nuevo objeto de configuración puede contener todos los parametros 
	* de la configuración o solo algunos
	*
	* @author Jorge Miralles
	* @param {object} config nueva configuración.
	* Ej: 	config = {
	*			default:"es",
	*			usePrefered: true,
	*			acceptedLanguage: "en",
	*			cookieName: "langCookie",
	*			cookieLanguage: "en",
	*			file: "{basePath}/i18n/language.json"
	* 	  	}
	*/
	changeConfig: function(config){
		this.config = lodash.extend(this.config,config);
		if (fs.existsSync(this.config.file)){
			var lang = this.selectLanguage();		
			this.translator = i18n(lang,this.config.file);
		}
	},

	/*
	* Raptor.js - Node framework
	*
	* Optiene la traducción a partir de un "tag" específico.
	*
	* @author Jorge Miralles
	* @param {string} tag Identificador de la traducción.
	* @param {string} file (Opcional) Nombre de un bundle o la dirección de un archivo para escoger como nuevo
	* archivo de traducción.
	*/
	getTranslation:function(tag, file){
		var trans = this.translator;
		if (fs.existsSync(file)){
			this.config.file = file;
			trans = i18n(this.config.currentLanguage,this.config.file);
		}else{
			var component = this.R.bundles[componentName];
			if (component) {
				var file = path.join(this.basePath,'src',component.path,this.config.i18nLocation);
				if (fs.existsSync(file)){
					this.config.file = file;
					trans = i18n(this.config.currentLanguage,file);
				}else{
					throw new Error('No existe un archivo de traducciones para el componente "' + componentName+'".');
				}
			}else{
				throw new Error('No existe un componente con nombre "' + componentName+'".');	//PONER COMO TRADUCCION LOL
			}			
		}
		
		return trans.__(tag);
	}
}
