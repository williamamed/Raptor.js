var i18n = require('i18n-nodejs')
, lodash = require('lodash')
, fs = require('fs');

module.exports={
	config:{},

	/*
	* Raptor.js - Node framework
	*
	* Solo para uso interno.
	* Devuelve un lenguaje a partir de lo especificado en la configuración.
	*
	* @author Jorge Miralles
	*/
	selectLanguage:function(){
		var lang = this.config.default;
		// Si la opción "usePrefered" esta activa (true) se guardan los lenguajes de la petición
		if (this.config.usePrefered == true) {
			this.config.acceptedLanguage=this.request.acceptedLanguages[0];
			lang = this.config.acceptedLanguage;
		}
		//Si la opción "cookieName" existe y no es vacía se cambia el lenguaje de la configuración por el lenguaje de la cookie
		if (this.config.cookieName && this.config.cookieName !=="") {
			this.config.cookieLanguage = this.request.cookies[this.config.cookieName];
			lang = this.config.cookieLanguage;
		}
		this.config.currentLanguage = lang;
		return lang;
	},

	/*
	* Raptor.js - Node framework
	*
	* Devuelve el lenguaje actual de las traducciones
	*
	* @author Jorge Miralles
	*/
	getCurrentLanguage:function(){
		return this.config.currentLanguage;
	},

	/*
	* Raptor.js - Node framework
	*
	* Devuelve el lenguaje actual de las traducciones
	*
	* @author Jorge Miralles
	* @param {string} lang Nuevo lenguaje
	*/
	setCurrentLanguage:function(lang){
		this.config.currentLanguage = lang;
		this.translator = i18n(this.config.currentLanguage,this.config.file);
	},

	/*
	* Raptor.js - Node framework
	*
	* Inicaliza el traductor a partir de la configuración
	*
	* @author Jorge Miralles
	* @param string basPath Ruta base del Raptor
	* @param {object} bundle Componente que utiliza el traductor
	* @param {object} req La peticion para la que se configura el traductor
	*/
	init:function(R,bundle, req){
		this.config.basePath = R.basePath;
		this.request = req;
		this.R = R;
		var file = R.basePath+'\\src\\'+bundle.path+'\\i18n\\language.json';

		if (fs.existsSync(file)){
			this.config.file = file;
			var lang = this.selectLanguage();		
			this.translator = i18n(lang,file);
		}
	},

	/*
	* Raptor.js - Node framework
	*
	* Cambia el lenguaje por defecto
	*
	* @author Jorge Miralles
	* @param {string} lang nuevo lenguaje
	*/
	setDefaultLanguage:function(lang){
		this.config.default = lang;
		//Si no se usa el lenguaje del navegador ni existe una cookie se reconfigura el traductor con el nuevo lenguaje por defecto
		if (!this.config.usePrefered && !this.config.cookieLanguage) {
			this.translator = i18n(this.config.default, this.config.file);
		};
	},

	/*
	* Raptor.js - Node framework
	*
	* Activa o desactiva el uso del lenguaje del navegador
	*
	* @author Jorge Miralles
	* @param {string} usePrefered nuevo lenguaje
	*/
	setUsePreferedLanguage:function(usePrefered){
		this.config.usePrefered = usePrefered;
		var lang = this.selectLanguage();	
		this.translator = i18n(lang,this.config.file);
	},

	/*
	* Raptor.js - Node framework
	*
	* Cambia el lenguaje obtenido de la cookie
	*
	* @author Jorge Miralles
	* @param {string} cookieLang nuevo lenguaje
	*/
	setCookieLanguage:function(cookieLang){
		this.config.cookieLanguage = cookieLang;
		this.translator = i18n(this.config.cookieLanguage,this.config.file);
	},

	/*
	* Raptor.js - Node framework
	*
	* Cambia el archivo de traducciones a partir del nombre de un componente
	*
	* @author Jorge Miralles
	* @param {string} componentName nombre del componente donde se encuentra el archivo de traducciones
	*/
	setLanguageComponent:function(componentName){
		var component = this.R.bundles[componentName];
		console.log(component);
		if (component) {
			var file = this.config.basePath+'\\src\\'+component.path+'\\i18n\\language.json';
			if (fs.existsSync(file)){
				this.config.file = file;
				var lang = this.selectLanguage();		
				this.translator = i18n(lang,file);
			}else{
				throw new Error('No existe un archivo de traducciones para el componente "' + componentName+'".');
			}
		}else{
			throw new Error('No existe un componente con nombre "' + componentName+'".');	//PONER COMO TRADUCCION LOL
		}
		//throw new Error(this.translator.__('noComponentByName'));
	},

	/*
	* Raptor.js - Node framework
	*
	* Cambia el archivo de traducciones a partir de una dirección absoluta
	*
	* @author Jorge Miralles
	* @param {string} filePath dirección absoluta del archivo de traducciones
	*/
	setLanguageFilePath:function(filePath){
		if (fs.existsSync(filePath)){
			this.config.file = filePath;
			var lang = this.selectLanguage();		
			this.translator = i18n(lang,this.config.file);
		}else{
			throw new Error('El archivo de traducciones no existe.');
		}
	},

	/*
	* Raptor.js - Node framework
	*
	* Cambia la configuración. El nuevo objeto de configuración puede contener todos los parametros 
	* de la configuración o solo algunos
	*
	* @author Jorge Miralles
	* @param {object} config nueva configuración.
	* Ej: 	config = {
	*			default:"es",
	*			usePrefered: true,
	*			acceptedLanguage: "en",
	*			cookieName: "langCookie",
	*			cookieLanguage: "en",
	*			basePath: "C:/NodeProjects/Raptor.js",
	*			file: "../i18n/language.json"
	* 	  	}
	*/
	changeConfig: function(config){
		this.config = lodash.extend(this.config,config);
		if (fs.existsSync(this.config.file)){
			var lang = this.selectLanguage();		
			this.translator = i18n(lang,this.config.file);
		}
	},

	/*
	* Raptor.js - Node framework
	*
	* Cambia el lenguaje por defecto
	*
	* @author Jorge Miralles
	* @param {string} lang nuevo lenguaje
	*/
	getTranslation:function(tag){
		if (this.translator.__(tag) === tag) {
			this.translator = i18n(this.config.default,this.config.file);
		};
		return this.translator.__(tag);
	}
}
