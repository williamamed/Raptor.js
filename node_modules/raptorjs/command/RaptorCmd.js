

function CommanLineTool(dirname){
	var program = require('commander')
		, fs = require('fs')
	    , Raptor= require('./../index').Raptor
	    , self=this
	    , version=require('./../package.json').version
	    , path=require('path')
	
	this.commands={}
	Raptor.basePath=dirname;
	Raptor.main(dirname);
	Raptor.readConfig();
	this.program=program;

	program
	  .version(version)
	  .usage('[options] [dir]')
	
	for (var bundle in Raptor.bundles) {
	    if(fs.existsSync(path.join(Raptor.basePath,'src',Raptor.bundles[bundle].path,'Commands'))){
	        fs.readdirSync(path.join(Raptor.basePath,'src',Raptor.bundles[bundle].path,'Commands'))
			   .filter(function(file) {
					return (file.indexOf('.') !== 0) && (file !== 'index.js')
			   })
			   .forEach(function(file) {
			   		var command=require(path.join(Raptor.basePath,'src',Raptor.bundles[bundle].path,'Commands',file))
			   		self.commands[command.placeholder]=command;
			   		program.option(command.command, command.description)
			   })
	    }
		
	}
	fs.readdirSync(__dirname + '/commands')
			   .filter(function(file) {
					return (file.indexOf('.') !== 0) && (file !== 'index.js')
			   })
			   .forEach(function(file) {
			   		var command=require(__dirname+'/commands/'+file)
			   		self.commands[command.placeholder]=command;
			   		program.option(command.command, command.description)
			   })
    
    
	
	this.Raptor=Raptor;		   
	
}

CommanLineTool.prototype.parse=function(){
	this.program.parse(process.argv);

	for (var i in this.commands) {
		
		if(this.program[this.commands[i].placeholder] && typeof this.commands[i]['action']=='function'){

			this.commands[i]['action'].apply(this.commands[i],[this.Raptor,this.program[this.commands[i].placeholder],this.program.args,this.program])
		}
			

	};
}

CommanLineTool.prototype.getProgram=function(){
	return this.program;
}

module.exports=CommanLineTool;
