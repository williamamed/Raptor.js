

module.exports={
	command:'--db-generate-model <componente>',
	description: 'Genera los modelos del proyecto',
	placeholder:'dbGenerateModel',
	action:function(R,value,arg,program){
		var SequelizeAuto = require('sequelize-auto')
			var lodash = require('lodash'),
				format= require('./../util/format');
				
			R.readOptions();
			R.lookModules();
			var dir='';
			var tables=null;
			var schema=null;

			if(R.bundles[value]){
				dir=R.basePath+'/src/'+R.bundles[value].path+'/Models';
			}else{
				console.log(format.getFormated('El componente especificado no existe','red'))
				return ;
			}

			if(arg.length>0){
				
				for (var i = 0; i < arg.length; i++) {
					var list=arg[i].split('schema=');
					if(list.length>1){
						var schema=list[1];
					}else{
						if(tables!=null)
							tables.push(arg[i])
						else{
							tables=[arg[i]];
						}
							
					}


				};
			}
			
			if(R.hasDatabaseConfig()){
				var obj={};
				obj=lodash.extend(obj,R.options.database.options)

				R.prepareDatabase(R.options.database.name,R.options.database.user,R.options.database.password,obj)

				var auto = new SequelizeAuto(R.options.database.name, R.options.database.user, R.options.database.password, {
				    host: R.database.sequelize.config.host,
				    dialect: R.database.sequelize.options.dialect,
				    directory: dir, // prevents the program from writing to disk
				    tables:tables,
				    schema: schema
				    //...
				})

				auto.run(function (err) {
				  if (err) throw err;

				  console.log(format.getFormated('Los modelos fueron importados correctamente.','yellow'));
				  
				});
			}else{
				console.log(format.getFormated('No se encontró la configuración de conexión con la base de datos','red'))
			}
			
		
	}
}